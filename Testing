-- Load Library --
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/RevampedCity/Shaman-Library/refs/heads/main/Library'))()
    local Window = Library:Window({ Text = "Revamped.City | üêçTHA BRONX 3üî™" })

-- Main --
    local mainTab = Window:Tab({ Text = "Main" })
    -- Main Section
    local mainSection = mainTab:Section({ Text = "Main Section" })

    -- Admin Alert
    mainSection:Toggle({
    Text = "Admin Alert",
    Description = "Notifies when an admin joins",
    Default = false,
    Callback = function(v148)
        _G.AdminAlertEnabled = v148
    end
    })

    local function checkForAdmin()
    for _, player in ipairs(game.Players:GetPlayers()) do
        for _, child in ipairs(player:GetChildren()) do
            if child.Name:find("_Tracker") then
                _G.Notify({
                    Title = "Admin Alert",
                    Content = "User: " .. player.Name .. " is an Admin! Be Careful!",
                    Duration = 5
                })
                return
            end
        end
    end
    end

    spawn(function()
    while wait(113 - (17 + 86)) do
        if _G.AdminAlertEnabled then
            checkForAdmin()
        end
    end
    end)

    -- Instant Prompt
    mainSection:Button({
    Text = "Instant Prompts",
    Description = "Removes the E Holding Time Anywhere",
    Callback = function()
        local function removeHoldDuration()
            for _, obj in ipairs(game:GetService("Workspace"):GetDescendants()) do
                if obj:IsA("ProximityPrompt") then
                    obj.HoldDuration = 0
                end
            end
        end
        removeHoldDuration()
        task.spawn(function()
            while true do
                task.wait(11 + 4)
                removeHoldDuration()
            end
        end)
    end
    })

-- Safe Mode Tab --
local safeModeTab = Window:Tab({ Text = "Safe Mode" })
local gunsSection = safeModeTab:Section({ Text = "Guns" })

-- Notification function using StarterGui:SetCore
local function showNotification(message)
    pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Revamped.City",
            Text = message,
            Duration = 5
        })
    end)
end

local keepGunsEnabled = false -- Toggle state

local function triggerKeepGuns()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer

    local excludedItems = {
        "Phone", "Fist", "Car Keys", "Gun Permit",
        ".UziMag", ".Bullets", "5.56", ".9mm", 
        ".Extended", ".FNMag", ".MacMag", ".TecMag", ".Drum",
        "Lemonade", "FakeCard", "G26", "Shiesty", "RawSteak",
        "Ice-Fruit Bag", "Ice-Fruit Cupz", "FijiWater", "FreshWater",
        "Red Elite Bag", "Black Elite Bag", "Blue Elite Bag",
        "Drac Bag", "Yellow RCR Bag", "Black RCR Bag",
        "Red RCR Bag", "Tan RCR Bag", "Black Designer Bag",
        "BluGloves", "WhiteGloves", "BlackGloves",
        "PinkCamoGloves", "RedCamoGloves", "BluCamoGloves",
        "Water", "RawChicken"
    }

    -- Normalizes strings by removing spaces/punctuation and converting to lowercase
    local function normalize(str)
        return str:lower():gsub("%W", "")
    end

    -- Checks if a tool is excluded, using abbreviation-friendly comparison
    local function isExcluded(toolName)
        local normTool = normalize(toolName)
        for _, excluded in ipairs(excludedItems) do
            if normalize(excluded) == normTool then
                return true
            end
        end
        return false
    end

    local ListWeaponRemote = ReplicatedStorage:WaitForChild("ListWeaponRemote")

    -- Function to sell an item
    local function sellItem(itemName)
        local args = {
            [1] = itemName,
            [2] = 999999
        }
        ListWeaponRemote:FireServer(unpack(args))
    end

    -- Function to sell all items except excluded ones
    local function sellAllItems()
        for _, item in pairs(Player.Backpack:GetChildren()) do
            if item:IsA("Tool") and not isExcluded(item.Name) then
                sellItem(item.Name)
            end
        end
    end

    -- Detect when player dies
local function onDeath()
    if keepGunsEnabled then
        task.spawn(function()
            repeat
                local soldSomething = false
                for _, item in pairs(Player.Backpack:GetChildren()) do
                    if item:IsA("Tool") and not table.find(excludedItems, item.Name) then
                        sellItem(item.Name)
                        soldSomething = true
                        task.wait(2) -- give the server a moment to process
                    end
                end
                task.wait(0.1)
            until not soldSomething -- Stop looping if nothing was sold
        end)
    end
end

    -- Detect when player respawns
    local function onRespawn()
        if keepGunsEnabled then
            task.wait(2)

            local playerGui = Player:FindFirstChild("PlayerGui")
            if playerGui then
                local marketGui = playerGui:FindFirstChild("Bronx Market 2")
                if marketGui then
                    marketGui.Enabled = true
                    showNotification("Please Select Your Guns")
                end
            end
        end
    end

    -- Character listener setup
    Player.CharacterAdded:Connect(function(character)
        local humanoid = character:WaitForChild("Humanoid", 5)
        if humanoid then
            humanoid.Died:Connect(onDeath)
        end
        onRespawn()
    end)

    -- In case player is already alive
    if Player.Character then
        local humanoid = Player.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.Died:Connect(onDeath)
        end
    end
end

-- Toggle for Keep Guns
gunsSection:Toggle({
    Text = "Keep Guns",
    State = false,
    Callback = function(state)
        keepGunsEnabled = state
        if keepGunsEnabled then
            triggerKeepGuns()
        end
    end
})


-- Player --
    local playerTab = Window:Tab({ Text = "Player" })
    local playerSection = playerTab:Section({ Text = "Player Options" })

    -- Anti-Knockback Toggle
    playerSection:Toggle({
    Text = "Anti-Knockback",
    Description = "Disables the knockback permanently",
    Default = false,
    Callback = function(state)
        local function removeKnockback()
            -- Destroy existing velocity objects
            for _, v416 in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v416:IsA("BodyVelocity") or v416:IsA("LinearVelocity") or v416:IsA("VectorForce") then
                    v416:Destroy()
                end
            end

            -- Check if AE exists and remove it
            if game.ReplicatedStorage:FindFirstChild("AE") then
                game.ReplicatedStorage.AE:Destroy()
            end

            -- Prevent knockback from new velocity objects
            game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").ChildAdded:Connect(
                function(v417)
                    if v417:IsA("BodyVelocity") or v417:IsA("LinearVelocity") or v417:IsA("VectorForce") then
                        v417:Destroy()
                    end
                end
            )
        end

        if state then
            -- Apply Anti-Knockback when enabled
            removeKnockback()
        end
    end
    })

    -- Anti-Hunger Toggle
    playerSection:Toggle({
    Text = "Anti-Hunger",
    Description = "Disables the hunger system permanently",
    Default = false,
    Callback = function(state)
        local function v151()
            local player = game.Players.LocalPlayer
            if player and player:FindFirstChild("PlayerGui") then
                local hunger = player.PlayerGui:FindFirstChild("Hunger")
                if hunger then
                    local hungerScript = hunger:FindFirstChild("Frame") and hunger.Frame:FindFirstChild("Frame") and
                        hunger.Frame.Frame:FindFirstChild("Frame") and hunger.Frame.Frame.Frame:FindFirstChild("HungerBarScript")
                    if hungerScript then
                        hungerScript.Disabled = true
                    end
                end
            end
        end

        if state then
            task.spawn(function()
                while state do
                    task.wait(1)
                    v151()
                end
            end)
        end
    end
    })

    -- Anti-Sleep Toggle
    playerSection:Toggle({
    Text = "Anti-Sleep",
    Description = "Disables the sleep system permanently",
    Default = false,
    Callback = function(state)
        local function v152()
            local player = game.Players.LocalPlayer
            if player and player:FindFirstChild("PlayerGui") then
                local sleepGui = player.PlayerGui:FindFirstChild("SleepGui")
                if sleepGui then
                    local sleepScript = sleepGui:FindFirstChild("Frame") and sleepGui.Frame:FindFirstChild("sleep") and
                        sleepGui.Frame.sleep:FindFirstChild("SleepBar") and sleepGui.Frame.sleep.SleepBar:FindFirstChild("sleepScript")
                    if sleepScript then
                        sleepScript.Disabled = true
                    end
                end
            end
        end

        if state then
            task.spawn(function()
                while state do
                    task.wait(1)
                    v152()
                end
            end)
        end
    end
    })

    -- Disable Stamina Toggle
    playerSection:Toggle({
    Text = "Disable Stamina",
    Description = "Disables the stamina system permanently",
    Default = false,
    Callback = function(state)
        local function v154()
            local player = game.Players.LocalPlayer
            if player and player:FindFirstChild("PlayerGui") then
                local stamina = player.PlayerGui:FindFirstChild("Run") and player.PlayerGui.Run:FindFirstChild("Frame") and
                    player.PlayerGui.Run.Frame:FindFirstChild("Frame") and
                    player.PlayerGui.Run.Frame.Frame:FindFirstChild("Frame") and
                    player.PlayerGui.Run.Frame.Frame.Frame:FindFirstChild("StaminaBarScript")
                if stamina then
                    stamina.Disabled = true
                end
            end
        end

        if state then
            task.spawn(function()
                while state do
                    task.wait(1)
                    v154()
                end
            end)
        end
    end
    })

    local movementSection = playerTab:Section({ Text = "Movement", Side = "Right" })

    local isWalkspeedEnabled = false
    local walkspeedValue = 16  -- Default WalkSpeed value
    getgenv().FreeFallMethod = false

    local player = game:GetService("Players").LocalPlayer

    local function setupCharacter()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local hrp = character:WaitForChild("HumanoidRootPart")
    return character, humanoid, hrp
    end

    local function toggleFreeFall(state)
    local character, humanoid, hrp = setupCharacter()
    if state then
        getgenv().FreeFallMethod = true
        task.wait(1)
        humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
        task.spawn(function()
            while isWalkspeedEnabled and humanoid do
                humanoid.WalkSpeed = walkspeedValue
                task.wait(0.1)
            end
        end)
    else
        getgenv().FreeFallMethod = false
        task.wait(0.1)
        humanoid:ChangeState(Enum.HumanoidStateType.Landed)
        humanoid.WalkSpeed = 16
    end
    end

    movementSection:Toggle({
    Text = "Enable Freefall",
    Callback = function(state)
        isWalkspeedEnabled = state
        toggleFreeFall(isWalkspeedEnabled)
    end
    })

    movementSection:Slider({
    Text = "Walkspeed",
    Min = 16,
    Max = 100,
    Default = walkspeedValue,
    Callback = function(value)
        walkspeedValue = value
    end
    })

    player.CharacterAdded:Connect(function()
    task.wait(1)
    if isWalkspeedEnabled then
        toggleFreeFall(true)
    end
    end)

    -- No Fall Damage Toggle
    movementSection:Toggle({
    Text = "Anti-Fall",
    Description = "Disables Fall Damage",
    Default = false,
    Callback = function(state)
        local function v150()
            local player = game.Players.LocalPlayer
            if player and player.Character then
                local fallDamage = player.Character:FindFirstChild("FallDamageRagdoll")
                if fallDamage then
                    fallDamage.Disabled = true
                end
            end
        end

        if state then
            task.spawn(function()
                while state do
                    task.wait(1)
                    v150()
                end
            end)
        end
    end
    })


    -- Noclip
    local noclipState = false
    local function toggleNoclip(state)
    noclipState = state
    if state then
        game:GetService("RunService").Stepped:Connect(function()
            if game.Players.LocalPlayer.Character then
                for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
    end

    movementSection:Toggle({
    Text = "Noclip",
    Description = "Toggle Noclip",
    Default = false,
    Callback = function(state)
        toggleNoclip(state)
    end
    })

    -- Infinite Jump
    local infiniteJumpState = false
    local function toggleInfiniteJump(state)
    infiniteJumpState = state
    if state then
        game:GetService("UserInputService").JumpRequest:Connect(function()
            if infiniteJumpState then
                local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end)
    end
    end

    movementSection:Toggle({
    Text = "Infinite Jump",
    Description = "Toggle infinite jump",
    Default = false,
    Callback = function(state)
        toggleInfiniteJump(state)
    end
    })


    -- Fly Section
    local flySection = playerTab:Section({ Text = "Fly", Side = "Right" })

    local flyEnabled = false
    local flySpeed = 50
    local flyBodyVelocity
    local moveKeys = {}
    local moveDirection = Vector3.zero
    local player = game.Players.LocalPlayer

    -- Function to update fly velocity based on input
    local function updateFlyVelocity()
    if not flyEnabled or not flyBodyVelocity then return end

    local cam = workspace.CurrentCamera

    -- Calculate direction based on the camera orientation
    moveDirection = Vector3.zero

    -- WASD - Follow camera orientation
    if moveKeys["W"] then moveDirection += cam.CFrame.LookVector end
    if moveKeys["S"] then moveDirection -= cam.CFrame.LookVector end
    if moveKeys["A"] then moveDirection -= cam.CFrame.RightVector end
    if moveKeys["D"] then moveDirection += cam.CFrame.RightVector end

    -- Controller (Left Stick)
    if moveKeys["ControllerUp"] then moveDirection += cam.CFrame.LookVector end
    if moveKeys["ControllerDown"] then moveDirection -= cam.CFrame.LookVector end
    if moveKeys["ControllerLeft"] then moveDirection -= cam.CFrame.RightVector end
    if moveKeys["ControllerRight"] then moveDirection += cam.CFrame.RightVector end

    -- Mobile (Touch controls)
    if moveKeys["TouchUp"] then moveDirection += Vector3.yAxis end
    if moveKeys["TouchDown"] then moveDirection -= Vector3.yAxis end

    -- Normalize direction to avoid diagonal speed boost
    if moveDirection.Magnitude > 0 then
        moveDirection = moveDirection.Unit
        flyBodyVelocity.Velocity = moveDirection * flySpeed
    else
        flyBodyVelocity.Velocity = Vector3.zero
    end
    end

    local function startFly()
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

    flyBodyVelocity = Instance.new("BodyVelocity")
    flyBodyVelocity.Name = "VeryWellFly"
    flyBodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    flyBodyVelocity.Velocity = Vector3.zero
    flyBodyVelocity.P = 1250
    flyBodyVelocity.Parent = hrp

    local userInput = game:GetService("UserInputService")
    local controllerInput = game:GetService("UserInputService")

    -- PC/WASD Keyboard Input
    userInput.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        local key = input.KeyCode.Name
        if key == "W" or key == "A" or key == "S" or key == "D" then
            moveKeys[key] = true
        end
    end)

    userInput.InputEnded:Connect(function(input)
        local key = input.KeyCode.Name
        if moveKeys[key] then
            moveKeys[key] = nil
        end
    end)

    -- Controller/Joystick Input
    controllerInput.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Gamepad1 then
            local axisX = input.Position.X
            local axisY = input.Position.Y

            if axisY > 0 then
                moveKeys["ControllerUp"] = true
            elseif axisY < 0 then
                moveKeys["ControllerDown"] = true
            end

            if axisX > 0 then
                moveKeys["ControllerRight"] = true
            elseif axisX < 0 then
                moveKeys["ControllerLeft"] = true
            end
        end
    end)

    controllerInput.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Gamepad1 then
            moveKeys["ControllerUp"] = nil
            moveKeys["ControllerDown"] = nil
            moveKeys["ControllerLeft"] = nil
            moveKeys["ControllerRight"] = nil
        end
    end)

    -- Mobile Touch Controls (Vertical Movement Only)
    userInput.TouchStarted:Connect(function(touch)
        local touchPos = touch.Position.Y
        if touchPos > screenHeight / 2 then
            moveKeys["TouchUp"] = true
        else
            moveKeys["TouchDown"] = true
        end
    end)

    userInput.TouchEnded:Connect(function(touch)
        moveKeys["TouchUp"] = nil
        moveKeys["TouchDown"] = nil
    end)

    -- Update fly velocity continuously
    game:GetService("RunService").Heartbeat:Connect(function()
        updateFlyVelocity()
    end)
    end

    local function stopFly()
    flyEnabled = false
    moveKeys = {}
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local flyPart = character.HumanoidRootPart:FindFirstChild("VeryWellFly")
        if flyPart then
            flyPart:Destroy()
        end
    end
    end

    -- Fly Section Toggle
    flySection:Toggle({
    Text = "Fly",
    Description = "Fly with WASD (PC), Joystick (Controller), or Touch (Mobile)",
    Default = false,
    Callback = function(state)
        flyEnabled = state
        if state then
            startFly()
        else
            stopFly()
        end
    end
    })

    -- Fly Speed Slider
    flySection:Slider({
    Text = "Fly Speed",
    Min = 10,
    Max = 150,
    Default = flySpeed,
    Callback = function(value)
        flySpeed = value
    end
    })

-- Visuals --
    local VisualTab = Window:Tab({ Text = "Visual" })
    local ESPSection = VisualTab:Section({ Text = "ESP Options" })
    local Players = game:GetService("Players")
    local Camera = game.Workspace.CurrentCamera
    local boxEspEnabled = false  -- Separate variable for Box ESP
    local nameEspEnabled = false  -- Separate variable for Name ESP
    local healthEspEnabled = false  -- Separate variable for Health ESP
    local EspList = {}
    local yOffset = 33  -- Default Y-offset
    local function createESP(Player)
    local Box = Drawing.new("Square")
    Box.Thickness = 1
    Box.Filled = false
    Box.Color = Color3.fromRGB(44, 84, 212) -- Baby blue color
    local function update()
    local Character = Player.Character
    if Character then
    local Humanoid = Character:FindFirstChildOfClass("Humanoid")
    if Humanoid and Humanoid.Health > 0 then
    local Pos, OnScreen = Camera:WorldToViewportPoint(Character.Head.Position)
    if OnScreen then
    Box.Size = Vector2.new(2450 / Pos.Z, 3850 / Pos.Z)
    Box.Position = Vector2.new(Pos.X - Box.Size.X / 2, Pos.Y - Box.Size.Y / 9)
    Box.Visible = boxEspEnabled  -- Only show the box if Box ESP is enabled
    return
    end
    end
    end
    Box.Visible = false
    end
    update()
    local Connection1 = Player.CharacterAdded:Connect(update)
    local Connection2 = Player.CharacterRemoving:Connect(function() Box.Visible = false end)
    return {
    update = update,
    disconnect = function()
    Box:Remove()
    Connection1:Disconnect()
    Connection2:Disconnect()
    end
    }
    end
    local function createNameESP(Player)
    local Name = Drawing.new("Text")
    Name.Text = Player.Name
    Name.Size = 10
    Name.Outline = true
    Name.Center = true
    Name.Color = Color3.fromRGB(44, 84, 212)
    local function update()
    local Character = Player.Character
    if Character then
    local Humanoid = Character:FindFirstChildOfClass("Humanoid")
    if Humanoid and Humanoid.Health > 0 then
    local Pos, OnScreen = Camera:WorldToViewportPoint(Character.Head.Position)
    if OnScreen then
    local X = Pos.X
    local Y = Pos.Y
    Name.Position = Vector2.new(X, Y - yOffset)  -- Apply Y-offset
    Name.Visible = nameEspEnabled  -- Only show the name if Name ESP is enabled
    return
    end
    end
    end
    Name.Visible = false
    end
    update()
    local Connection1 = Player.CharacterAdded:Connect(update)
    local Connection2 = Player.CharacterRemoving:Connect(function() Name.Visible = false end)
    return {
    update = update,
    disconnect = function()
    Name:Remove()
    Connection1:Disconnect()
    Connection2:Disconnect()
    end,
    Name = Name
    }
    end
    local function createHealthBar(player)
    if player == game.Players.LocalPlayer then
    return
    end
    local humanoid = player.Character:WaitForChild("Humanoid")
    local gui = Instance.new("BillboardGui")
    gui.Name = "HealthBar"
    gui.Adornee = player.Character.Head
    gui.Size = UDim2.new(5, 0, .3, 0)
    gui.StudsOffset = Vector3.new(0, -5.7, 0)
    gui.AlwaysOnTop = true
    gui.Parent = player.Character.Head           
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
    frame.BackgroundColor3 = Color3.fromRGB(44, 84, 212)
    frame.BorderSizePixel = 0
    frame.Parent = gui
    humanoid.HealthChanged:Connect(function()
    frame.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
    end)
    player.CharacterAdded:Connect(function(character)
    humanoid = character:WaitForChild("Humanoid")
    gui.Adornee = character.Head
    frame.Size = UDim2.new(humanoid.Health / humanoid.MaxHealth, 0, 1, 0)
    end)
    end
    ESPSection:Toggle({
    Text = "Enable Box ESP",
    State = false,
    Callback = function(state)
    boxEspEnabled = state
    for _, espInstance in ipairs(EspList) do
    espInstance.update()
    end
    end
    })
    ESPSection:Toggle({
    Text = "Enable Names ESP",
    State = false,
    Callback = function(state)
    nameEspEnabled = state
    for _, espInstance in ipairs(EspList) do
    espInstance.Name.Visible = state
    end
    end
    })
    ESPSection:Toggle({
    Text = "Enable Health ESP",
    State = false,
    Callback = function(state)
    healthEspEnabled = state
    for _, player in pairs(Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
    if state then
    createHealthBar(player)
    else
    local healthBar = player.Character and player.Character:FindFirstChild("Head"):FindFirstChild("HealthBar")
    if healthBar then
    healthBar:Destroy()
    end
    end
    end
    end
    end
    })
    local function createAllESP()
    for _, Player in pairs(Players:GetPlayers()) do
    if Player ~= Players.LocalPlayer then
    table.insert(EspList, createESP(Player))  -- Add Box ESP for the player
    table.insert(EspList, createNameESP(Player))  -- Add Name ESP for the player
    if healthEspEnabled then
    createHealthBar(Player)  -- Add Health ESP for the player
    end
    end
    end
    end
    Players.PlayerAdded:Connect(function(player)
    if player ~= Players.LocalPlayer then
    table.insert(EspList, createESP(player))  -- Add Box ESP for the player
    table.insert(EspList, createNameESP(player))  -- Add Name ESP for the player
    if healthEspEnabled then
    createHealthBar(player)  -- Add Health ESP for the player
    end
    end
    end)
    createAllESP()
    game:GetService("RunService").RenderStepped:Connect(function()
    for _, espInstance in ipairs(EspList) do
    espInstance.update()
    end
    end)
    -- Effects Section
    local EffectsSection = VisualTab:Section({ Text = "Effects Options", Side = "Right" })

    -- No Camera Shake Button
    EffectsSection:Button({
    Text = "Anti-CameraShake",
    Description = "Disables the camera shake effect permanently",
    Callback = function()
        local v155 = 0 - 0
        local v156
        while true do
            if (v155 == 1) then
                task.spawn(
                    function()
                        while true do
                            task.wait(1)
                            v156()
                        end
                    end
                )
                break
            end
            if (0 == v155) then
                v156 = nil
                function v156()
                    local v562 = 580 - (361 + 219)
                    local v563
                    while true do
                        if (v562 == 0) then
                            v563 = game.Players.LocalPlayer
                            if (v563 and v563.Character) then
                                local v706 = 320 - (53 + 267)
                                local v707
                                while true do
                                    if (v706 == 0) then
                                        v707 = v563.Character:FindFirstChild("CameraBobbing")
                                        if v707 then
                                            v707:Destroy()
                                        end
                                        break
                                    end
                                end
                            end
                            break
                        end
                    end
                end
                v155 = 1 + 0
            end
        end
    end
    })

    -- FPS Boost Button
    EffectsSection:Button({
    Text = "Boost FPS (Potato PC)",
    Description = "Deletes all specific effects from Lighting permanently",
    Callback = function()
        local function v7()
            if game.Lighting then
                for v518, v519 in pairs(game.Lighting:GetChildren()) do
                    if (v519:IsA("PostEffect") or v519:IsA("BloomEffect") or v519:IsA("SunRaysEffect") or
                        v519:IsA("DepthOfFieldEffect")) then
                        pcall(function()
                            v519:Destroy()
                        end)
                    end
                end
            end
        end
        local function v8(v144)
            game.Lighting.ClockTime = v144
            if _G.LockTimeConnection then
                _G.LockTimeConnection:Disconnect()
            end
            _G.LockTimeConnection =
                game.Lighting:GetPropertyChangedSignal("ClockTime"):Connect(
                    function()
                        if (game.Lighting.ClockTime ~= v144) then
                            game.Lighting.ClockTime = v144
                        end
                    end
                )
        end
        task.spawn(function()
            pcall(function()
                loadstring(
                    game:HttpGet(
                        "https://raw.githubusercontent.com/RevampedCity/Shaman-Library/refs/heads/main/Remove%20Lighting"
                    )
                )()
            end)
        end)
        v7()
    end
    })

    -- Change To Day Button
    EffectsSection:Button({
    Text = "Change To Day",
    Description = "Click to set the game time to permanent day.",
    Callback = function()
        game.Lighting.ClockTime = 12 -- Sets the time to noon (day)
    end
    })

    -- Change To Night Button
    EffectsSection:Button({
    Text = "Change To Night",
    Description = "Click to set the game time to permanent night.",
    Callback = function()
        game.Lighting.ClockTime = 0 -- Sets the time to midnight (night)
    end
    })
    
-- Dupe --
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local Workspace = game:GetService("Workspace")
    local Player = Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local BackpackRemote = ReplicatedStorage:WaitForChild("BackpackRemote")
    local Inventory = ReplicatedStorage:WaitForChild("Inventory")
    local dupeCooldown = false
    local autoDupeEnabled = false
    local rememberedGun = nil

    local function onCharacterAdded(newCharacter)
    Character = newCharacter
    end
    Player.CharacterAdded:Connect(onCharacterAdded)

    local DupeTab = Window:Tab({ Text = "Dupe" })
    local GunsSection = DupeTab:Section({ Text = "Guns Section" })
    local HowToDupeSection = DupeTab:Section({ Text = "How To Dupe", Side = "Right" })

    local function showDupeScreen()
    local PlayerGui = Player:FindFirstChild("PlayerGui")
    if not PlayerGui then return end
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "DupeScreen"
    ScreenGui.Parent = PlayerGui

    local Background = Instance.new("Frame")
    Background.Size = UDim2.new(1, 0, 1, 0)
    Background.BackgroundColor3 = Color3.new(0, 0, 0)
    Background.Parent = ScreenGui

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(0.6, 0, 0.1, 0)
    Title.Position = UDim2.new(0.2, 0, 0.3, 0)
    Title.Text = "Revamped.City"
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.TextScaled = true
    Title.Font = Enum.Font.SourceSansBold
    Title.BackgroundTransparency = 1
    Title.Parent = Background

    local DupeText = Instance.new("TextLabel")
    DupeText.Size = UDim2.new(0.6, 0, 0.1, 0)
    DupeText.Position = UDim2.new(0.2, 0, 0.45, 0)
    DupeText.Text = "Duping."
    DupeText.TextColor3 = Color3.fromRGB(173, 216, 230) -- Light blue
    DupeText.TextScaled = true
    DupeText.Font = Enum.Font.SourceSansBold
    DupeText.BackgroundTransparency = 1
    DupeText.Parent = Background

    task.spawn(function()
    while ScreenGui.Parent do
            DupeText.Text = "Duping."
            task.wait(0.5)
            DupeText.Text = "Duping.."
            task.wait(0.5)
            DupeText.Text = "Duping..."
            task.wait(0.5)
        end
    end)
    return ScreenGui
    end

    local function getHeldTool()
    return Character:FindFirstChildOfClass("Tool") -- Gets the currently held gun/tool
    end

    local function TriggerSeat()
    local seat = Workspace:FindFirstChildOfClass("Seat") or Workspace:FindFirstChildOfClass("VehicleSeat")
    if seat then
        local humanoid = Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:Sit(seat)
        end
    end
    end

    local function teleportTo(position)
    local humanoid = Character:FindFirstChild("Humanoid")

    TriggerSeat()
    task.wait(1)
    Character.HumanoidRootPart.CFrame = CFrame.new(position)
    
    if humanoid then
        humanoid.Sit = false
    end
    end

    local function dupeGun()
    if dupeCooldown then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Dupe Gun",
            Text = "Dupe Gun is on cooldown! Please wait for 30 seconds.",
            Duration = 5
        })
        return
    end

    local tool = rememberedGun or getHeldTool()
    if tool then
        local toolName = tool.Name
        rememberedGun = tool -- Store the tool to continue duping if AutoDupe is on
        local originalPos = Character.HumanoidRootPart.CFrame
        local safeStorage = Workspace["1# Map"]["2 Crosswalks"].Safes:GetChildren()[5]
        local DupeScreen = showDupeScreen()
        Character:FindFirstChildOfClass("Humanoid"):UnequipTools()
        
        teleportTo(safeStorage.Union.CFrame.Position)
        
        task.wait(1.5)
        task.spawn(function()
            BackpackRemote:InvokeServer("Store", toolName)
        end)
        task.spawn(function()
            Inventory:FireServer("Change", toolName, "Backpack", safeStorage)
        end)
        task.wait(0.5)
        
        teleportTo(originalPos.Position)
        
        task.wait(1.2)
        BackpackRemote:InvokeServer("Grab", toolName)
        
        if DupeScreen then
            DupeScreen:Destroy()
        end
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Dupe Gun",
            Text = "Duplication Complete!",
            Duration = 5
        })

        dupeCooldown = true
        local countdown = 30
        for i = countdown, 1, -1 do
            if i % 5 == 0 then
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Dupe Gun Cooldown",
                    Text = "Cooldown: " .. i .. " seconds remaining.",
                    Duration = 5
                })
            end
            task.wait(1)
        end
        dupeCooldown = false

        if autoDupeEnabled then
            dupeGun() -- AutoDupe will keep running until disabled
        else
            rememberedGun = nil -- Forget the gun when AutoDupe is turned off
        end
    else
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Dupe Gun",
            Text = "No Gun Found!",
            Duration = 5
        })
    end
    end

    GunsSection:Button({
    Text = "Dupe Gun",
    Callback = function()
        dupeGun()
    end
    })

    GunsSection:Toggle({
    Text = "AutoDupe",
    State = false,
    Callback = function(state)
        autoDupeEnabled = state
        if state then
            local tool = getHeldTool()
            if tool then
                rememberedGun = tool -- Set the gun to dupe continuously
                dupeGun() -- Start the loop
            else
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "AutoDupe",
                    Text = "No gun equipped to dupe!",
                    Duration = 5
                })
                autoDupeEnabled = false
            end
        else
            rememberedGun = nil -- Forget the last used gun
        end
    end
    })

    HowToDupeSection:Button({
    Text = "How To Dupe",
    Callback = function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "How To Dupe",
            Text = "1. Equip the gun you want to duplicate.\n2. Press 'Dupe Gun' to begin the duplication process.\n3. Toggle 'AutoDupe' to keep duplicating the same gun after each cooldown.",
            Duration = 5
        })
    end
    })

-- Teleports FIXED --
    local TeleportTab = Window:Tab({ Text = "Teleport" })
    local TeleportSection = TeleportTab:Section({ Text = "Main" })
    local player = game:GetService("Players").LocalPlayer
    local locations = {
    {name = "Studio", position = Vector3.new(93432.28125, 14484.7421875, 565.5982666015625)},
    {name = "Police Station", position = Vector3.new(-67.72321319580078, 283.4699401855469, -719.5398559570312)},
    {name = "Bank", position = Vector3.new(-207, 284, -1214)},
    {name = "Icebox", position = Vector3.new(-210, 283, -1257)},
    {name = "Penthouse", position = Vector3.new(-150.90985107421875, 417.2039794921875, -567.7549438476562)},
    {name = "Safe", position = Vector3.new(68515.65625, 52941.5, -796.0286865234375)},
    {name = "Laptop", position = Vector3.new(-1017, 253, -251)},
    {name = "Money Wash", position = Vector3.new(-990.2910766601562, 253.6531524658203, -688.8972778320312)},
    {name = "Cooking Pots (Penthouse)", position = Vector3.new(-132, 417, -598)},
    {name = "Cooking Van", position = Vector3.new(-52, 287, -338)}
    }

    local function TriggerSeat()
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
    for _, obj in pairs(workspace:GetDescendants()) do
    if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
    obj:Sit(humanoid)
    return
    end
    end
    end
    end
    local function teleportTo(position)
    local screen = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer.PlayerGui)
    screen.Name = "TeleportScreen"
    screen.ResetOnSpawn = false  -- Prevent the GUI from resetting on death
    local frame = Instance.new("Frame", screen)
    frame.Size = UDim2.new(1, 0, 1.5, 0)
    frame.Position = UDim2.new(0, 0, -0.06, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = "Teleporting."
    label.TextColor3 = Color3.fromRGB(173, 216, 230)
    label.TextScaled = true
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold
    local dotCounter = 1
    local function updateDots()
    while screen.Parent do
    label.Text = "Teleporting." .. string.rep(".", dotCounter)
    dotCounter = (dotCounter % 3) + 1
    task.wait(1)
    end
    end
    task.spawn(updateDots)
    local function updateTextSize()
    while screen.Parent do
    label.TextSize = math.random(40, 60)
    task.wait(0.1)
    end
    end
    task.spawn(updateTextSize)
    local revText = Instance.new("TextLabel", frame)
    revText.Size = UDim2.new(0.5, 0, 0.1, 0)
    revText.Position = UDim2.new(0.25, 0, 0.8, 0)
    revText.Text = "Revamped.City"
    revText.TextColor3 = Color3.fromRGB(255, 255, 255)
    revText.TextScaled = true
    revText.BackgroundTransparency = 1
    revText.Font = Enum.Font.GothamBold
    TriggerSeat()  -- Sit in a chair
    -- Wait for 1 second after sitting
    wait(1)
    -- Now teleport the player
    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    -- Immediately unsit the player to make sure they're no longer seated
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if humanoid then
    humanoid.Sit = false
    end
    -- Destroy the screen after the teleportation is complete
    screen:Destroy()
    end
    for _, location in ipairs(locations) do
    TeleportSection:Button({
    Text = location.name,
    Callback = function()
    teleportTo(location.position)
    end
    })
    end
    local TeleportSection = TeleportTab:Section({ Text = "Guns" })
    local player = game:GetService("Players").LocalPlayer
    local locations = {
    {name = "Studio Guns", position = Vector3.new(72422.1171875, 128855.6328125, -1086.7322998046875)},
    {name = "Gun Shop 1", position = Vector3.new(92993.046875, 122097.953125, 17026.3515625)},
    {name = "Gun Shop 2", position = Vector3.new(66201.1875, 123615.703125, 5749.68115234375)},
    {name = "Gun Shop 3", position = Vector3.new(60841.60546875, 87609.140625, -352.474609375)}
    }

    local function TriggerSeat()
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
    for _, obj in pairs(workspace:GetDescendants()) do
    if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
    obj:Sit(humanoid)
    return
    end
    end
    end
    end
    local function teleportTo(position)
    local screen = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer.PlayerGui)
    screen.Name = "TeleportScreen"
    screen.ResetOnSpawn = false  -- Prevent the GUI from resetting on death
    local frame = Instance.new("Frame", screen)
    frame.Size = UDim2.new(1, 0, 1.5, 0)
    frame.Position = UDim2.new(0, 0, -0.06, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = "Teleporting."
    label.TextColor3 = Color3.fromRGB(173, 216, 230)
    label.TextScaled = true
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold
    local dotCounter = 1
    local function updateDots()
    while screen.Parent do
    label.Text = "Teleporting." .. string.rep(".", dotCounter)
    dotCounter = (dotCounter % 3) + 1
    task.wait(1)
    end
    end
    task.spawn(updateDots)
    local function updateTextSize()
    while screen.Parent do
    label.TextSize = math.random(40, 60)
    task.wait(0.1)
    end
    end
    task.spawn(updateTextSize)
    local revText = Instance.new("TextLabel", frame)
    revText.Size = UDim2.new(0.5, 0, 0.1, 0)
    revText.Position = UDim2.new(0.25, 0, 0.8, 0)
    revText.Text = "Revamped.City"
    revText.TextColor3 = Color3.fromRGB(255, 255, 255)
    revText.TextScaled = true
    revText.BackgroundTransparency = 1
    revText.Font = Enum.Font.GothamBold
    TriggerSeat()  -- Sit in a chair
    -- Wait for 1 second after sitting
    wait(1)
    -- Now teleport the player
    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    -- Immediately unsit the player to make sure they're no longer seated
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if humanoid then
    humanoid.Sit = false
    end
    -- Destroy the screen after the teleportation is complete
    screen:Destroy()
    end
    for _, location in ipairs(locations) do
    TeleportSection:Button({
    Text = location.name,
    Callback = function()
    teleportTo(location.position)
    end
    })
    end
    local TeleportSection = TeleportTab:Section({ Text = "Shops", Side = "Right" })
    local player = game:GetService("Players").LocalPlayer
    local locations = {
    {name = "Bank Tools", position = Vector3.new(-420.06304931640625, 340.34051513671875, -557.3113403320312)},
    {name = "Dealership", position = Vector3.new(-408.208984375, 253.25640869140625, -1248.583251953125)},
    {name = "Safe", position = Vector3.new(68515.65625, 52941.5, -796.0286865234375)},
    {name = "Backpack", position = Vector3.new(-674, 254, -682)},
    {name = "Cooking Van", position = Vector3.new(-52, 287, -338)},
    {name = "Exotic Dealer", position = Vector3.new(-1521, 273, -983)}
    }

    local function TriggerSeat()
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
    for _, obj in pairs(workspace:GetDescendants()) do
    if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
    obj:Sit(humanoid)
    return
    end
    end
    end
    end
    local function teleportTo(position)
    local screen = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer.PlayerGui)
    screen.Name = "TeleportScreen"
    screen.ResetOnSpawn = false  -- Prevent the GUI from resetting on death
    local frame = Instance.new("Frame", screen)
    frame.Size = UDim2.new(1, 0, 1.5, 0)
    frame.Position = UDim2.new(0, 0, -0.06, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = "Teleporting."
    label.TextColor3 = Color3.fromRGB(173, 216, 230)
    label.TextScaled = true
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold
    local dotCounter = 1
    local function updateDots()
    while screen.Parent do
    label.Text = "Teleporting." .. string.rep(".", dotCounter)
    dotCounter = (dotCounter % 3) + 1
    task.wait(1)
    end
    end
    task.spawn(updateDots)
    local function updateTextSize()
    while screen.Parent do
    label.TextSize = math.random(40, 60)
    task.wait(0.1)
    end
    end
    task.spawn(updateTextSize)
    local revText = Instance.new("TextLabel", frame)
    revText.Size = UDim2.new(0.5, 0, 0.1, 0)
    revText.Position = UDim2.new(0.25, 0, 0.8, 0)
    revText.Text = "Revamped.City"
    revText.TextColor3 = Color3.fromRGB(255, 255, 255)
    revText.TextScaled = true
    revText.BackgroundTransparency = 1
    revText.Font = Enum.Font.GothamBold
    TriggerSeat()  -- Sit in a chair
    -- Wait for 1 second after sitting
    wait(1)
    -- Now teleport the player
    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    -- Immediately unsit the player to make sure they're no longer seated
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if humanoid then
    humanoid.Sit = false
    end
    -- Destroy the screen after the teleportation is complete
    screen:Destroy()
    end
    for _, location in ipairs(locations) do
    TeleportSection:Button({
    Text = location.name,
    Callback = function()
    teleportTo(location.position)
    end
    })
    end


    local TeleportSection = TeleportTab:Section({ Text = "NYPD Section", Side = "Right" })
    TeleportSection:Button({
    Text = "Police Room",
    Callback = function()
    teleportTo(Vector3.new(-102, 285, -689))
    end
    })
    TeleportSection:Button({
    Text = "FBI Room",
    Callback = function()
    teleportTo(Vector3.new(-117.96803283691406, 285.3559875488281, -739.5340576171875))
    end
    })
    TeleportSection:Button({
    Text = "ESU Room",
    Callback = function()
    teleportTo(Vector3.new(-125.00878143310547, 285.35595703125, -682.3515014648438)) -- Update coordinates if needed
    end
    })
    TeleportSection:Button({
    Text = "Electric Chair",
    Callback = function()
    teleportTo(Vector3.new(-135.516845703125, 285.35595703125, -738.83935546875))
    end
    })
    TeleportSection:Button({
    Text = "Court Room",
    Callback = function()
    teleportTo(Vector3.new(-92.50507354736328, 287.05169677734375, -761.1896362304688))
    end
    })
    -- Function to sit in a chair and teleport to the given position
    local function TriggerSeat()
    local humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid")
    if humanoid then
    for _, obj in pairs(workspace:GetDescendants()) do
    if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
    obj:Sit(humanoid)
    return
    end
    end
    end
    end
    -- Function to teleport the player
    local function teleportTo(position)
    local player = game:GetService("Players").LocalPlayer
    local screen = Instance.new("ScreenGui", player.PlayerGui)
    screen.Name = "TeleportScreen"
    screen.ResetOnSpawn = false  -- Prevent GUI reset on death
    local frame = Instance.new("Frame", screen)
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = "Teleporting."
    label.TextColor3 = Color3.fromRGB(173, 216, 230)
    label.TextScaled = true
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold
    local dotCounter = 1
    local function updateDots()
    while screen.Parent do
    label.Text = "Teleporting." .. string.rep(".", dotCounter)
    dotCounter = (dotCounter % 3) + 1
    task.wait(1)
    end
    end
    task.spawn(updateDots)
    -- Sit the player in a seat first
    TriggerSeat()
    -- Wait for 1 second after sitting
    wait(1)
    -- Teleport the player to the target position
    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    -- Immediately unsit the player to make sure they're no longer seated
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if humanoid then
    humanoid.Sit = false
    end
    -- Destroy the screen after teleportation
    screen:Destroy()
    end
    local PlayersSection = TeleportTab:Section({ Text = "Players" })
    local player = game:GetService("Players").LocalPlayer
    local teleporting = false
    local originalPosition
    local function TriggerSeat()
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
    for _, obj in pairs(workspace:GetDescendants()) do
    if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
    obj:Sit(humanoid)
    return
    end
    end
    end
    end
    -- Function to teleport the player
    local function teleportTo(position)
    local screen = Instance.new("ScreenGui", player.PlayerGui)
    screen.Name = "TeleportScreen"
    screen.ResetOnSpawn = false  -- Prevent GUI reset on death
    local frame = Instance.new("Frame", screen)
    frame.Size = UDim2.new(1, 0, 1.5, 0)
    frame.Position = UDim2.new(0, 0, -.06, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = "Teleporting."
    label.TextColor3 = Color3.fromRGB(173, 216, 230)
    label.TextScaled = true
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold
    local dotCounter = 1
    local function updateDots()
    while screen.Parent do
    label.Text = "Teleporting." .. string.rep(".", dotCounter)
    dotCounter = (dotCounter % 3) + 1
    task.wait(1)
    end
    end
    task.spawn(updateDots)
    -- Sit the player in a chair first
    TriggerSeat()
    -- Wait for 1 second after sitting
    wait(1)
    -- Teleport the player to the target position
    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    -- Immediately unsit the player to make sure they're no longer seated
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if humanoid then
    humanoid.Sit = false
    end
    screen:Destroy()
    end
    local function findPlayer(input)
    input = input:lower()
    for _, targetPlayer in pairs(game:GetService("Players"):GetPlayers()) do
    if targetPlayer.Name:lower():sub(1, #input) == input or targetPlayer.DisplayName:lower():sub(1, #input) == input then
    return targetPlayer
    end
    end
    return nil
    end
    local playerName = ""
    PlayersSection:Input({
    Text = "Enter Player Name",
    Placeholder = "Player Name",
    Callback = function(value)
    playerName = value
    end
    })
    PlayersSection:Button({
    Text = "Teleport to Player",
    Callback = function()
    local targetPlayer = findPlayer(playerName)
    if targetPlayer then
    teleportTo(targetPlayer.Character.HumanoidRootPart.Position)
    end
    end
    })
	
-- Open GUI's --
    local guiTab = Window:Tab({ Text = "GUI's" })
    local guiSection = guiTab:Section({ Text = "GUI" })
    local bronxClothingButton = guiSection:Button({
    Text = "Bronx Clothing",
    Callback = function()
    local Plr = game.Players.LocalPlayer  -- Get the local player
    Plr.PlayerGui["Bronx CLOTHING"].Enabled = true  -- Enable the "Bronx CLOTHING" GUI
    end
    })
    local bronxMarketButton = guiSection:Button({
    Text = "Bronx Market",
    Callback = function()
    local Plr = game.Players.LocalPlayer  -- Get the local player
    Plr.PlayerGui["Bronx Market 2"].Enabled = true  -- Enable Bronx Market 2
    end
    })
    local bronxPawningButton = guiSection:Button({
    Text = "Bronx Pawning",
    Callback = function()
    local Plr = game.Players.LocalPlayer  -- Get the local player
    Plr.PlayerGui["Bronx PAWNING"].Enabled = true  -- Enable the "Bronx PAWNING" GUI
    end
    })
    local bronxTattoosButton = guiSection:Button({
    Text = "Bronx Tattoos",
    Callback = function()
    local Plr = game.Players.LocalPlayer  -- Get the local player
    Plr.PlayerGui["Bronx TATTOOS"].Enabled = true  -- Enable the "Bronx TATTOOS" GUI
    end
    })
    local bronxCraftingButton = guiSection:Button({
    Text = "Bronx Crafting",
    Callback = function()
    local Plr = game.Players.LocalPlayer  -- Get the local player
    Plr.PlayerGui.CraftGUI.Main.Visible = true  -- Make the "CraftGUI Main" visible
    end
    })
    local bronxGarageButton = guiSection:Button({
    Text = "Bronx Garage",
    Callback = function()
    local Plr = game.Players.LocalPlayer  -- Get the local player
    Plr.PlayerGui.ColorWheel.Enabled = true  -- Enable the "Bronx Garage" (ColorWheel)
    local Notification = Instance.new("ScreenGui")
    Notification.Name = "Notification"
    Notification.Parent = game.Players.LocalPlayer.PlayerGui
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Parent = Notification
    TextLabel.Text = "Press 'Back' Unless You Have The Game Pass"
    TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextLabel.BackgroundTransparency = 0.5
    TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.Position = UDim2.new(0.5, -150, 0, 20)  -- Position at the top middle of the screen
    TextLabel.Size = UDim2.new(0, 300, 0, 50)
    TextLabel.TextScaled = true
    TextLabel.AnchorPoint = Vector2.new(0.5, 0)
    wait(3)
    Notification:Destroy()
    end
    })
    local clonedATMGui = nil
    local bronxATMToggle = guiSection:Toggle({
    Text = "Bronx ATM",
    Callback = function(isToggled)
    local Plr = game.Players.LocalPlayer  -- Get the local player
    local lighting = game:GetService("Lighting")
    local atmGui = lighting:FindFirstChild("Assets"):FindFirstChild("GUI"):FindFirstChild("ATMGui")  -- Get the ATMGui
    if isToggled then
    if atmGui then
    clonedATMGui = atmGui:Clone()
    clonedATMGui.Parent = Plr:WaitForChild("PlayerGui")
    else
    warn("ATM not found.")
    end
    else
    if clonedATMGui then
    clonedATMGui:Destroy()
    clonedATMGui = nil
    end
    end
    end
    })

-- AutoFarm --
    local autoFarmTab = Window:Tab({ Text = "Auto Farm" })
    local autoFarmSection = autoFarmTab:Section({ Text = "Auto Farms" })
    local player = game:GetService("Players").LocalPlayer
    local originalPosition = player.Character and player.Character.HumanoidRootPart.Position or Vector3.new(0, 0, 0)
    -- Function to create the Teleport GUI (only when needed)
    local function createTeleportGui()
    -- Create the Teleport GUI (hidden initially)
    local teleportScreen = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer.PlayerGui)
    teleportScreen.Name = "TeleportScreen"
    teleportScreen.ResetOnSpawn = false  -- Prevent GUI from resetting on death

    local teleportFrame = Instance.new("Frame", teleportScreen)
    teleportFrame.Size = UDim2.new(1, 0, 1.5, 0)
    teleportFrame.Position = UDim2.new(0, 0, -0.06, 0)

    teleportFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    teleportFrame.BackgroundTransparency = 0  -- Full black, no transparency

    local titleLabel = Instance.new("TextLabel", teleportFrame)
    titleLabel.Size = UDim2.new(1, 0, 0.1, 0)
    titleLabel.Text = "Revamped.City"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White text
    titleLabel.TextScaled = true
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.GothamBold

    local teleportLabel = Instance.new("TextLabel", teleportFrame)
    teleportLabel.Size = UDim2.new(1, 0, 0.2, 0)
    teleportLabel.Position = UDim2.new(0, 0, 0.4, 0)  -- Adjusted to be in the center of the top portion
    teleportLabel.Text = "Teleporting..."
    teleportLabel.TextColor3 = Color3.fromRGB(173, 216, 230)  -- Light blue text
    teleportLabel.TextScaled = true
    teleportLabel.BackgroundTransparency = 1
    teleportLabel.Font = Enum.Font.GothamBold

    return teleportScreen, teleportLabel
    end

    -- Function to teleport the player to a specific position
    local function teleportTo(position)
    -- Sit the player in a seat first
    TriggerSeat()
    -- Wait for 1 second after sitting
    wait(1)
    -- Teleport the player to the target position
    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    -- Immediately unsit the player to make sure they're no longer seated
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.Sit = false
    end
    end

    -- Function to perform studio farming
    local function studioFarm()
    local cashPickupLocations = {
        {name = "StudioPay1", position = Vector3.new(93418.6640625, 14486.2060546875, 564.9903564453125)},
        {name = "StudioPay2", position = Vector3.new(93427.578125, 14487.21484375, 577.8220825195312)},
        {name = "StudioPay3", position = Vector3.new(93435.3828125, 14486.7900390625, 563.5308837890625)}
    }

    -- Create the teleport GUI when the button is pressed
    local teleportScreen, teleportLabel = createTeleportGui()
    
    -- Show the Teleporting screen
    teleportScreen.Parent = game:GetService("Players").LocalPlayer.PlayerGui
    teleportLabel.Text = "Teleporting..."  -- Set initial text to Teleporting

    -- Teleport to the first location (Studio)
    teleportTo(cashPickupLocations[1].position)  
    wait(1)  -- Wait after teleportation

    -- Update the text to Farming when at the studio
    teleportLabel.Text = "Farming..."

    -- Start farming by interacting with the StudioPay locations
    for _, cashPickup in ipairs(cashPickupLocations) do
        teleportTo(cashPickup.position)  -- Teleport to each cash pickup location
        wait(1)  -- Wait after teleportation

        -- Show the GUI for the prompt interaction
        local v360 = workspace:FindFirstChild("StudioPay")
        if v360 then
            local v622 = v360:FindFirstChild("Money")
            if v622 then
                for _, v730 in ipairs(v622:GetChildren()) do
                    local v731 = v730:FindFirstChild("StudioMoney1")
                    if v731 then
                        local v749 = v731:FindFirstChild("Prompt")
                        if v749 and v749:IsA("ProximityPrompt") and v749.Enabled then
                            -- Change the HoldDuration to 0
                            v749.HoldDuration = 0
                            
                            -- Trigger InputHoldBegin and InputHoldEnd for each ProximityPrompt
                            v749:InputHoldBegin()  -- Simulate holding the prompt
                            wait(0.1)  -- Simulate hold duration
    v749:InputHoldEnd()  -- End the hold
    end
    end
    end
    end
    end
    wait(1)  -- Wait before moving to the next pickup location
    end
    -- After completing the 3rd location, teleport back to the original position
    teleportLabel.Text = "Teleporting Back..."
    teleportTo(originalPosition)
    -- Hide the teleport screen once farming is complete
    wait(1)  -- Optional wait time before closing the GUI
    teleportScreen.Parent = nil  -- Close the teleporting screen
    end
    autoFarmSection:Button({
    Text = "Studio Farm",
    Callback = function()
    -- Start the farming process when the button is pressed
    studioFarm()
    end
    })

    local constructionStuff = workspace:FindFirstChild("ConstructionStuff")
    local startJobPrompt = constructionStuff and constructionStuff:FindFirstChild("Start Job") and constructionStuff["Start Job"]:FindFirstChild("Prompt")
    local wall1Prompt = constructionStuff and constructionStuff:FindFirstChild("Wall1 Prompt")
    local wall2Prompt = constructionStuff and constructionStuff:FindFirstChild("Wall2 Prompt")
    local wall3Prompt = constructionStuff and constructionStuff:FindFirstChild("Wall3 Prompt")
    local wall4Prompt = constructionStuff and constructionStuff:FindFirstChild("Wall4 Prompt")
    local wall1Label = wall1Prompt and wall1Prompt:FindFirstChild("Attachment") and wall1Prompt.Attachment.Gui.Label
    local wall2Label = wall2Prompt and wall2Prompt:FindFirstChild("Attachment") and wall2Prompt.Attachment.Gui.Label
    local wall3Label = wall3Prompt and wall3Prompt:FindFirstChild("Attachment") and wall3Prompt.Attachment.Gui.Label
    local wall4Label = wall4Prompt and wall4Prompt:FindFirstChild("Attachment") and wall4Prompt.Attachment.Gui.Label

    local player = game:GetService("Players").LocalPlayer

    local function hasPlyWood()
    return player.Backpack:FindFirstChild("PlyWood") or (player.Character and player.Character:FindFirstChild("PlyWood"))
    end

    local function isWallLabelEmpty(label)
    return label and label.Text == ""
    end

    local function holdTool(toolName)
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = player.Character
    end
    end

    local function setProximityPromptHoldDuration()
    for _, object in pairs(workspace.ConstructionStuff:GetDescendants()) do
        if object:IsA("ProximityPrompt") then
            object.HoldDuration = 0
        end
    end
    end

    local function moveToNextAvailableWall()
    if isWallLabelEmpty(wall1Label) then
        teleportTo(Vector3.new(-1673.493, 367.842, -1192.850))
    elseif isWallLabelEmpty(wall2Label) then
        teleportTo(Vector3.new(-1704.753, 367.859, -1152.238))
    elseif isWallLabelEmpty(wall3Label) then
        teleportTo(Vector3.new(-1729.988, 367.877, -1151.989))
    elseif isWallLabelEmpty(wall4Label) then
        teleportTo(Vector3.new(-1760.961, 367.859, -1152.124))
    end
    end

    local function grabPlyWood()
    teleportTo(Vector3.new(-1727.879, 370.812, -1177.503)) -- Go to PlyWood pickup
    wait(0.2)
    
    while not hasPlyWood() do
        wait(0.002)
    end
    
    holdTool("PlyWood") -- Ensure player is holding the PlyWood before leaving
    end

    local function performAutofarm()
    setProximityPromptHoldDuration()
    
    if startJobPrompt then
        teleportTo(Vector3.new(-1727.957, 370.812, -1171.312)) -- Move to Start Job location
        
        -- Wait for the Start Job prompt to be triggered twice
        startJobPrompt.Triggered:Wait()
        startJobPrompt.Triggered:Wait()
    end

    while true do
        grabPlyWood() -- Always grab PlyWood before proceeding
        moveToNextAvailableWall()
    end
    end

    -- Function to sit in a chair before teleporting
    local function TriggerSeat()
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
                obj:Sit(humanoid)
                return
            end
        end
    end
    end

    -- Function to ensure player is seated before teleporting
    local function ensureSeated()
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
        while not humanoid.Sit do
            for _, obj in pairs(workspace:GetDescendants()) do
                if obj:IsA("Seat") or obj:IsA("VehicleSeat") then
                    obj:Sit(humanoid)
                    break
                end
            end
            wait(0.1) -- Check every 0.1s to ensure seating before teleporting
        end
    end
    end

    -- Function to teleport to a position with the "Teleporting" screen
    local function teleportTo(position)
    local screen = Instance.new("ScreenGui", player.PlayerGui)
    screen.Name = "TeleportScreen"
    screen.ResetOnSpawn = false
    local frame = Instance.new("Frame", screen)
    frame.Size = UDim2.new(1, 0, 1.5, 0)
    frame.Position = UDim2.new(0, 0, -0.06, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0
    local label = Instance.new("TextLabel", frame)
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = "Teleporting."
    label.TextColor3 = Color3.fromRGB(173, 216, 230)
    label.TextScaled = true
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold
    local dotCounter = 1
    local function updateDots()
        while screen.Parent do
            label.Text = "Teleporting." .. string.rep(".", dotCounter)
            dotCounter = (dotCounter % 3) + 1
            task.wait(1)
        end
    end
    task.spawn(updateDots)
    
    -- Ensure player is seated before teleporting
    ensureSeated()

    -- Teleport the player
    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    
    -- Unsit the player after teleporting
    local humanoid = player.Character:FindFirstChild("Humanoid")
    if humanoid then
        humanoid.Sit = false
    end
    
    -- Destroy the teleport screen
    screen:Destroy()
    end

    autoFarmSection:Toggle({
    Text = "Construction Farm",
    Callback = function(state)
        if state then
            performAutofarm()
        end
    end
    })

    
    local isAutoFarming = false
    function hasItem(itemName)
    local backpack = game:GetService("Players").LocalPlayer.Backpack
    for _, item in ipairs(backpack:GetChildren()) do
    if item.Name == itemName then
    return true
    end
    end
    return false
    end
    function purchaseItems()
    local itemsNeeded = { "FreshWater", "Ice-Fruit Bag", "FijiWater", "Ice-Fruit Cupz" }
    for _, itemName in ipairs(itemsNeeded) do
    if not hasItem(itemName) then
    game:GetService("ReplicatedStorage"):WaitForChild("ExoticShopRemote"):InvokeServer(itemName)
    task.wait(0.5) -- Small delay to ensure item gets added
    end
    end
    end
    function setHoldDurationToZero()
    for _, obj in ipairs(workspace.CookingPots:GetDescendants()) do
    if obj:IsA("ProximityPrompt") then
     obj.HoldDuration = 0
    end
    end
    end
    function teleportWithFreeFall(targetPosition)
    getgenv().FreeFallMethod = true
    task.wait(0.8)
    local player = game:GetService("Players").LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
    player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
    getgenv().FreeFallMethod = false
    end
    function holdToolUntilRemoved(toolName)
    local player = game:GetService("Players").LocalPlayer
    while isAutoFarming and not hasItem(toolName) do
    task.wait(0.2)
    end
    local tool = player.Backpack:FindFirstChild(toolName)
    if tool then
    tool.Parent = player.Character -- Equip the tool
    print("Holding: " .. toolName)
    end
    while isAutoFarming and (hasItem(toolName) or player.Character:FindFirstChild(toolName)) do
    task.wait(0.2)
    end
    print(toolName .. " removed")
    end
    function teleportToSellLocationWhenCupzPressed()
    local player = game:GetService("Players").LocalPlayer
    local prompt = workspace.CookingPots.CookingPot.CookPart.ProximityPrompt
    prompt.Triggered:Wait()  -- Wait until the prompt is triggered (i.e., the player presses "E")
    teleportWithFreeFall(Vector3.new(-83.105, 286.721, -338.175))
    end
    function autoFarm()
    while isAutoFarming do
    setHoldDurationToZero()
    purchaseItems()
    teleportWithFreeFall(Vector3.new(-134.003, 283.379, -575.231))
    holdToolUntilRemoved("FreshWater")
    task.wait(0.2) -- Small buffer to ensure smooth transition
    holdToolUntilRemoved("Ice-Fruit Bag")
    task.wait(0.2)
    holdToolUntilRemoved("FijiWater")
    task.wait(0.2)
    holdToolUntilRemoved("Ice-Fruit Cupz")
    teleportToSellLocationWhenCupzPressed()
    task.wait(62)
    while isAutoFarming and hasItem("Ice-Fruit Cupz") do
    task.wait(0.2)
    end
    teleportWithFreeFall(Vector3.new(-134.003, 283.379, -575.231))
    end
    end
    local koolaidFarmToggle = autoFarmSection:Toggle({
    Text = "Koolaid Farm",
    Default = false,
    Callback = function(state)
    isAutoFarming = state
    if state then
    autoFarm()
    end
    end
    })

    -- Garbage Farm --
    local garbageFarmEnabled = false
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    getgenv().FreeFallMethod = false  -- Used to control FreeFall state
    task.spawn(function()
    while task.wait() do
    if getgenv().FreeFallMethod then
    if character and character:FindFirstChild("Humanoid") then
    character.Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
    end
    end
    end
    end)
    local function getAllDumpsters()
    local dumpsters = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
    if obj:IsA("Part") and obj.Name == "DumpsterPromt" and obj:FindFirstChildOfClass("ProximityPrompt") then
    table.insert(dumpsters, obj)
    end
    end
    return dumpsters
    end
    local function freefallTeleport(position)
    getgenv().FreeFallMethod = true  -- Enable freefall
    task.wait(0.8)  -- Wait for 0.8 seconds before teleporting
    character.HumanoidRootPart.CFrame = CFrame.new(position)
    getgenv().FreeFallMethod = false  -- Disable freefall
    end
    local function isAtPosition(position)
    return (character.HumanoidRootPart.Position - position).Magnitude < 1  -- Check if close enough
    end
    autoFarmSection:Toggle({
    Text = "Garbage Farm",
    Callback = function(state)
    garbageFarmEnabled = state
    if state then
    task.spawn(function()
    local dumpsters = getAllDumpsters()
    local currentDumpsterIndex = 1  -- Start from the first dumpster
    while garbageFarmEnabled and currentDumpsterIndex <= #dumpsters do
    local currentDumpster = dumpsters[currentDumpsterIndex]
    if currentDumpster then
    local prompt = currentDumpster:FindFirstChildOfClass("ProximityPrompt")
    if prompt then
    prompt.HoldDuration = 0  -- Make prompt activate instantly on press
    freefallTeleport(currentDumpster.Position)
    local attemptCount = 0
    while not isAtPosition(currentDumpster.Position) and attemptCount < 3 do
    task.wait(0.5)  -- Wait a bit before checking again
    freefallTeleport(currentDumpster.Position)  -- Retry teleporting if not at the position
    attemptCount = attemptCount + 1
    end
    if isAtPosition(currentDumpster.Position) then
    prompt.Triggered:Wait()
    currentDumpsterIndex = currentDumpsterIndex + 1
    else
    print("Failed to teleport to dumpster, retrying...")
    end
    end
    end
    task.wait(0.1)  -- Small wait to avoid too fast execution
    end
    end)
    end
    end
    })
    local autoFarmSection = autoFarmTab:Section({ Text = "Pick Ups", Side = "Right" })

    -- Pick Up Dropped Money
    autoFarmSection:Toggle({
    Text = "Pick Up Dropped Money",
    Description = "Enables automatic teleportation when money is found.",
    Default = false,
    Callback = function(v347)
        local v73 = v347
        if v73 then
            spawn(function()
                while v73 do
                    -- Logic for picking up dropped money
                    local v4 = game:GetService("Players")
                    local v16 = v4.LocalPlayer
                    local v109 = workspace:FindFirstChild("Dollas")
                    getgenv().FreeFallMethod = false
                    
                    -- Function to teleport to position
                    local function v111(v339)
                        local v340 = v16.Character or v16.CharacterAdded:Wait()
                        local v341 = v340 and v340:FindFirstChild("HumanoidRootPart")
                        if v341 then
                            v341.CFrame = CFrame.new(v339, v339 + Vector3.new(0, 0, -1))
                        end
                    end

                    -- Function to handle money pickup
                    local function v117()
                        if not v109 then
                            return
                        end
                        local v342 = v16.Character or v16.CharacterAdded:Wait()
                        local v343 = v342 and v342:FindFirstChild("HumanoidRootPart")
                        if not v343 then
                            return
                        end
                        for v463, v464 in ipairs(v109:GetChildren()) do
                            if (v464:IsA("Part") and ((v464.Name == "Money") or (v464.Name == "DeadMoney"))) then
                                local v551 = 0
                                local v552
                                while true do
                                    if (v551 == 2) then
                                        task.wait(0.2)
                                        v552 = v464:FindFirstChild("ProximityPrompt")
                                        v551 = 1
                                    end
                                    if (v551 == 1) then
                                        if (v552 and v552:IsA("ProximityPrompt")) then
                                            -- Enable FreeFall before teleporting
                                            getgenv().FreeFallMethod = true
                                            v111(v464.Position + Vector3.new(0, 3, 0))
                                            v552:InputHoldBegin()
                                            task.wait(0.1)
                                            v552:InputHoldEnd()
                                        end
                                        task.wait(1) -- Wait for 1 second before teleporting again
                                        break
                                    end
                                end
                            end
                        end
                        getgenv().FreeFallMethod = false
                    end

                    -- Main loop to handle teleporting to money
                    while v73 do
                        v117()
                        task.wait(1) -- Wait for 1 second between teleportations
                    end
                end
            end)
        else
            -- Disable FreeFall if toggle is off
            getgenv().FreeFallMethod = false
        end
    end
    })

-- Money --
    local moneyTab = Window:Tab({ Text = "Money" })
    local bankSection = moneyTab:Section({ Text = "Bank Options", Side = "Left" })
    
    local depositAmount = 0
    local withdrawAmount = 0
    local dropAmount = 0
    bankSection:Input({
    Placeholder = "Deposit Amount",
    Flag = "DepositAmount",
    Callback = function(input)
    depositAmount = tonumber(input) or 0
    end
    })
    bankSection:Input({
    Placeholder = "Withdrawal Amount",
    Flag = "WithdrawAmount",
    Callback = function(input)
    withdrawAmount = tonumber(input) or 0
    end
    })
    bankSection:Input({
    Placeholder = "Money Drop Amount",
    Flag = "DropAmount",
    Callback = function(input)
    dropAmount = tonumber(input) or 0
    end
    })
    local depositLoop
    bankSection:Toggle({
    Text = "Deposit",
    Default = false,
    Callback = function(state)
    if state then
    depositLoop = game:GetService("RunService").Heartbeat:Connect(function()
    game:GetService("ReplicatedStorage").BankAction:FireServer("depo", depositAmount)
    v0:Notify({ Title = "Deposit", Content = "Deposited $" .. depositAmount, Duration = 3 })
    wait(4) -- Wait for 4 seconds before the next action
    end)
    else
    if depositLoop then
    depositLoop:Disconnect()
    depositLoop = nil
    end
    end
    end
    })
    local withdrawLoop
    bankSection:Toggle({
    Text = "Withdrawal",
    Default = false,
    Callback = function(state)
    if state then
    withdrawLoop = game:GetService("RunService").Heartbeat:Connect(function()
    game:GetService("ReplicatedStorage").BankAction:FireServer("depo", depositAmount)
    game:GetService("ReplicatedStorage").BankAction:FireServer("with", withdrawAmount)
    v0:Notify({ Title = "Withdraw", Content = "Withdrew $" .. withdrawAmount, Duration = 6 - 3 })
    wait(4) -- Wait for 4 seconds before the next action
    end)
    else
    if withdrawLoop then
    withdrawLoop:Disconnect()
    withdrawLoop = nil
    end
    end
    end
    })
    local dropLoop
    bankSection:Toggle({
    Text = "Money Drop",
    Default = false,
    Callback = function(state)
    if state then
    dropLoop = game:GetService("RunService").Heartbeat:Connect(function()
    game:GetService("ReplicatedStorage"):WaitForChild("BankProcessRemote"):InvokeServer("Drop", dropAmount)
    v0:Notify({ Title = "Money Drop", Content = "Dropped $" .. dropAmount, Duration = 3 - 1 })
    wait(4) -- Wait for 4 seconds before the next action
    end)
    else
    if dropLoop then
    dropLoop:Disconnect()
    dropLoop = nil
    end
    end
    end
    })
    local dropAmount = 10000  -- Default drop amount
    local player = game:GetService("Players").LocalPlayer
    local moneyDropActive = false  -- Flag to track if the toggle is on
    local originalPosition = nil   -- To store the player's original position
    local moneyDropCoroutine = nil  -- Variable to store the coroutine running the loop
    local function enableFreeFall()
    getgenv().FreeFallMethod = true
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
    humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
    end
    end
    local function disableFreeFallAndReturn()
    getgenv().FreeFallMethod = false
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then
    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    end
    if originalPosition then
    player.Character.HumanoidRootPart.CFrame = originalPosition
    end
    end
    local function dropMoney()
    game:GetService("ReplicatedStorage"):WaitForChild("BankProcessRemote"):InvokeServer("Drop", dropAmount)
    end
    local function teleportToPlayer(target)
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
    enableFreeFall()
    local targetRootPart = target.Character.HumanoidRootPart
    player.Character.HumanoidRootPart.CFrame = targetRootPart.CFrame + Vector3.new(0, 5, 0)  -- Adjust height if needed
    wait(1)  -- Wait for the teleportation to complete
    dropMoney()
    wait(2)  -- Wait before moving to the next player
    end
    end
    local function startMoneyDropAll(state)
    if state then
    moneyDropActive = true  -- Toggle is active, start dropping money
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
    originalPosition = player.Character.HumanoidRootPart.CFrame
    end
    local players = game:GetService("Players"):GetPlayers()
    moneyDropCoroutine = coroutine.create(function()
    while moneyDropActive do
    for _, target in ipairs(players) do
    if target ~= player then  -- Avoid teleporting to self
    teleportToPlayer(target)
    wait(2)  -- Wait before going to the next player
    end
    end
    end
    end)
    coroutine.resume(moneyDropCoroutine)
    else
    moneyDropActive = false
    if moneyDropCoroutine then
    coroutine.close(moneyDropCoroutine)
    moneyDropCoroutine = nil
    end
    disableFreeFallAndReturn()  -- Disable FreeFall and return to the original position
    end
    end
    bankSection:Toggle({
    Text = "Money Drop ALL",
    Default = false,
    Callback = function(state)
    startMoneyDropAll(state)
    end
    })
    bankSection:Input({
    Placeholder = "Money Drop Amount",
    Flag = "DropAmount",  -- Flag to store the value
    Callback = function(input)
    dropAmount = tonumber(input) or 10000  -- Default to 10000 if invalid input
    end
    })

-- Shop --
    local shopTab = Window:Tab({ Text = "Shop" })
    local exoticDealerSection = shopTab:Section({ Text = "Exotic Dealer" })
    local function purchaseItem(itemName)
    game:GetService("ReplicatedStorage"):WaitForChild("ExoticShopRemote"):InvokeServer(itemName)
    end
    exoticDealerSection:Button({ Text = "Lemonade $500", Callback = function()
    purchaseItem("Lemonade")
    end })
    exoticDealerSection:Button({ Text = "FakeCard $700", Callback = function()
    purchaseItem("FakeCard")
    end })
    exoticDealerSection:Button({ Text = "G26 $550", Callback = function()
    purchaseItem("G26")
    end })
    exoticDealerSection:Button({ Text = "Shiesty $75", Callback = function()
    purchaseItem("Shiesty")
    end })
    exoticDealerSection:Button({ Text = "RawSteak $10", Callback = function()
    purchaseItem("RawSteak")
    end })
    exoticDealerSection:Button({ Text = "Ice-Fruit Bag $2500", Callback = function()
    purchaseItem("Ice-Fruit Bag")
    end })
    exoticDealerSection:Button({ Text = "Ice-Fruit Cupz $150", Callback = function()
    purchaseItem("Ice-Fruit Cupz")
    end })
    exoticDealerSection:Button({ Text = "FijiWater $48", Callback = function()
    purchaseItem("FijiWater")
    end })
    exoticDealerSection:Button({ Text = "FreshWater $48", Callback = function()
    purchaseItem("FreshWater")
    end })
    local backpackShopSection = shopTab:Section({ Text = "Backpack Shop" })
    local player = game:GetService("Players").LocalPlayer
    local userInputService = game:GetService("UserInputService")
    local function teleportTo(position)
    getgenv().FreeFallMethod = true
    task.wait(0.8)  -- Wait 0.8s before teleporting
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
    player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    end
    getgenv().FreeFallMethod = false
    end
    local function waitForEPress()
    return userInputService.InputBegan:Wait().KeyCode == Enum.KeyCode.E
    end
    local function buyBackpack(position)
    local originalPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
    teleportTo(position)  -- Teleport to backpack shop location
    repeat
    local keyPressed = waitForEPress()
    until keyPressed
    if originalPosition then
    repeat
    teleportTo(originalPosition)
    task.wait(0.5)
    until (player.Character and player.Character:FindFirstChild("HumanoidRootPart") and (player.Character.HumanoidRootPart.Position - originalPosition).Magnitude < 5)
    end
    end
    local backpacks = {
    { name = "Red Elite Bag $500", position = Vector3.new(-681, 254, -692) },
    { name = "Black Elite Bag $500", position = Vector3.new(-680, 254, -691)},
    { name = "Blue Elite Bag $500", position = Vector3.new(-676, 254, -690) },
    { name = "Drac Bag $700", position = Vector3.new(-673, 254, -691) },
    { name = "Yellow RCR Bag $2000", position = Vector3.new(-673, 254, -691) },
    { name = "Black RCR Bag $2000", position = Vector3.new(-672, 254, -690) },
    { name = "Red RCR Bag $2000", position = Vector3.new(-669, 254, -691) },
    { name = "Tan RCR Bag $2000", position = Vector3.new(-666, 254, -694) },
    { name = "Black Designer Bag $2000", position = Vector3.new(-668, 254, -692) }
    }
    for _, bag in ipairs(backpacks) do
    backpackShopSection:Button({
    Text = bag.name,
    Callback = function()
    buyBackpack(bag.position)
    end
    })
    end
    task.spawn(function()
    while task.wait() do
    if getgenv().FreeFallMethod then
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
    local humanoid = player.Character.Humanoid
    humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
    end
    end
    end
    end)
    local wearablesSection = shopTab:Section({ Text = "Wearables" })
    local shiestyButton = wearablesSection:Button({
    Text = "Shiesty $25",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("Shiesty")
    end
    })
    local bluGlovesButton = wearablesSection:Button({
    Text = "BluGloves $10",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("BluGloves")
    end
    })
    local whiteGlovesButton = wearablesSection:Button({
    Text = "White Gloves $10",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("WhiteGloves")
    end
    })
    local blackGlovesButton = wearablesSection:Button({
    Text = "BlackGloves $10",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("BlackGloves")
    end
    })
    local pinkCamoGlovesButton = wearablesSection:Button({
    Text = "PinkCamoGloves $67",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("PinkCamoGloves")
    end
    })
    local redCamoGlovesButton = wearablesSection:Button({
    Text = "RedCamoGloves $67",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("RedCamoGloves")
    end
    })
    local bluCamoGlovesButton = wearablesSection:Button({
    Text = "BluCamoGloves $67",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("BluCamoGloves")
    end
    })
    local foodSection = shopTab:Section({ Text = "Food" })
    local waterButton = foodSection:Button({
    Text = "Water $10",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("Water")
    end
    })
    local rawSteakButton = foodSection:Button({
    Text = "RawSteak $10",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("RawSteak")
    end
    })
    local rawChickenButton = foodSection:Button({
    Text = "RawChicken $10",
    Callback = function()
    game:GetService("ReplicatedStorage"):WaitForChild("ShopRemote"):InvokeServer("RawChicken")
    end
    })

-- Troll --
    local TrollTab = Window:Tab({ Text = "Troll" })
    local trollSection = TrollTab:Section({ Text = "Tweet" })

    -- Variable for Tweet message
    local tweetMessage = "Revamped.City"  -- Default tweet message

    -- Input box for tweet message (formatted as requested)
    trollSection:Input({
    Text = "Tweet Message",
    Placeholder = "Enter your tweet message",
    Callback = function(value)
        tweetMessage = value
    end
    })

    -- Variable to track the toggle state for Annoy Server
    local v108 = false

    -- Toggle for Annoying Server (Send repeated tweets)
    trollSection:Toggle({
    Text = "Annoy Server",
    Description = "Send repeated tweets to annoy people in the server.",
    Default = false,
    Callback = function(toggleState)
        v108 = toggleState
        if v108 then
            -- Start sending the tweets repeatedly
            coroutine.wrap(
                function()
                    while v108 do
                        game:GetService("ReplicatedStorage"):WaitForChild("Resources"):WaitForChild("#Phone"):WaitForChild("Main"):FireServer(
                            "Tweet",
                            {"CreateTweet", tweetMessage}
                        )
                        wait(772.4 - (326 + 445)) -- Adjusted wait time
                    end
                end
            )()
        end
    end
    })
	-- Troll Tab
    local trollSection = TrollTab:Section({ Text = "Tools", Side = "Right" })

    -- List of items to copy from Lighting to the player's backpack
    local itemsToCopy = {
    "Police Tape", "BatteringRam", "Baton", "CopRadio", "DeftunCard",
    "FBI ID", "Firework", "Flash Light", "GasCan", "Guitar",
    "Handcuffs", "MEDKIT", "Medkit", "Megaphone"
    }

    local player = game:GetService("Players")["722f398qz4tizwxxap10"]
    local lighting = game:GetService("Lighting")

    -- Create a button for each item in the list
    for _, itemName in ipairs(itemsToCopy) do
    trollSection:Button({
        Text = "Copy " .. itemName,
        Description = "Copy " .. itemName .. " from Lighting to your Backpack.",
        Callback = function()
            local item = lighting:FindFirstChild(itemName)
            if item then
                local copiedItem = item:Clone()
                copiedItem.Parent = player.Backpack
            end
        end
    })
    end
    

-- Rage -- 
    local RageTab = Window:Tab({ Text = "Rage" })
    local ExploitSection = RageTab:Section({ Text = "Exploit" })
    local deletedParts = {}
    local playerPositions = {}
    local Plr = game:GetService("Players").LocalPlayer
    local Mouse = Plr:GetMouse()
    local deleteEnabled = false
    local bringPlayersActive = false  -- Track bring players toggle state
    Mouse.Button1Down:connect(function()
    if not deleteEnabled then
    return
    end
    if not game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.C) then
    return
    end
    if not Mouse.Target then
    return
    end
    local deletedPart = Mouse.Target
    table.insert(deletedParts, deletedPart)
    deletedPart:Destroy()
    end)
    local function RestoreDeletedParts()
    for _, part in pairs(deletedParts) do
    if part.Parent == nil then
    local restoredPart = part:Clone()
    restoredPart.Parent = game.Workspace
    end
    end
    deletedParts = {}  -- Clear the list of deleted parts after restoring
    end
    local function BringPlayersInFront()
    local players = game.Players:GetPlayers()
    local angleStep = 360 / math.max(#players, 1)  -- Avoid division by zero
    local radius = 10  -- Radius of the circle around the local player
    for i, player in ipairs(players) do
    if player ~= game.Players.LocalPlayer then
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
    local humanoidRootPart = character.HumanoidRootPart
    local humanoid = character:FindFirstChild("Humanoid")
    if humanoid and not humanoid.SeatPart and humanoid.Health > 0 then
    if not playerPositions[player] then
    playerPositions[player] = humanoidRootPart.Position
    end
    local angle = math.rad(angleStep * i)
    local xOffset = math.cos(angle) * radius
    local zOffset = math.sin(angle) * radius
    humanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(xOffset, 0, zOffset)
    end
    end
    end
    end
    end
    local function ReturnPlayersToOriginalPosition()
    for player, originalPosition in pairs(playerPositions) do
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
    character.HumanoidRootPart.CFrame = CFrame.new(originalPosition)
    end
    end
    playerPositions = {}  -- Clear the stored positions
    end
    local DeleteToggle = ExploitSection:Toggle({
    Text = "Enable C + Delete",  -- Text for the toggle
    Callback = function(toggleState)
    deleteEnabled = toggleState
    if not deleteEnabled then
    RestoreDeletedParts()
    end
    end
    })
    local BringPlayersToggle = ExploitSection:Toggle({
    Text = "Bring All Players in Circle",  -- Text for the toggle
    Callback = function(toggleState)
    bringPlayersActive = toggleState  -- Update the tracking variable
    if bringPlayersActive then
    task.spawn(function()  -- Run in a separate thread to prevent UI lag
    while bringPlayersActive do
    BringPlayersInFront()
    wait(0.1)  -- Adjust the loop speed as needed
    end
    end)
    else
    ReturnPlayersToOriginalPosition()
    end
    end
    })

    local combatSection = RageTab:Section({ Text = "Combat" })


    -- Toggle for Entire Lobby Teleportation
    combatSection:Button({
    Text = "Kill All Players (TESTING)",
    Description = "Teleport and kill all players in the lobby.",
    Default = false,
    Callback = function(v316)
        v101 = v316
        if v101 then
            coroutine.wrap(
                function()
                    while v101 do
                        for _, player in pairs(game.Players:GetPlayers()) do
                            if player.Character and player.Character:FindFirstChild("Humanoid") then
                                local humanoid = player.Character:FindFirstChild("Humanoid")
                                local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
                                if humanoidRootPart then
                                    humanoidRootPart.CFrame = CFrame.new(v102) -- Teleport to the coordinates
                                    if humanoid.Health > 0 then
                                        humanoid.Health = 0 -- Kill the player
                                    end
                                end
                            end
                        end
                        wait(0.1) -- Delay to ensure the teleportation works without overwhelming the server
                    end
                end
            )()
        end
    end
    })
